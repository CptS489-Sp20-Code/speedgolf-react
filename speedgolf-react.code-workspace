{
	"folders": [
		{
			"path": "."
		}
	],
	"settings": {
		"textmarker.savedHighlights": [
			{
				"pattern": {
					"type": "string",
					"expression": "{this.state.confirmDelete ? this.renderConfirmDeleteDialog() : null}",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			},
			{
				"pattern": {
					"type": "string",
					"expression": "//renderConfirmDeleteDialog: presents user with dialog to confirm deletion\r\n  //of round. Credit: https://getbootstrap.com/docs/4.0/components/modal/\r\n  renderConfirmDeleteDialog = () => {\r\n      return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n          <div className=\"modal-content\">\r\n              <div className=\"modal-header\">\r\n                <p className=\"modal-title\">Confirm Round Deletion</p>\r\n                  <button className=\"close-modal-button\" onClick={this.cancelDelete}>\r\n                    &times;</button>\r\n              </div>\r\n              <div className=\"modal-body\">\r\n                <h4>Are you sure that you want to delete this round?</h4>\r\n                <div className=\"modal-footer\">\r\n                    <button className=\"btn btn-primary btn-color-scheme\"\r\n                      onClick={this.doDelete}>\r\n                    Yes, delete round</button>\r\n                    <button className=\"btn btn-secondary\" \r\n                      onClick={this.cancelDelete}>\r\n                    No, do not delete round</button>\r\n                </div>\r\n              </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			},
			{
				"pattern": {
					"type": "string",
					"expression": "//doDelete -- Triggered when the user clicks on the \"Yes Delete\" button in\r\n    //the confirm delete dialog box. Call upon parent component's deleteRound to\r\n    //to actually performt he deletion of the round currently flagged for\r\n    //deletion and toggle the confirmDelete state variable to hide the confirm\r\n    //dialog box.\r\n    doDelete = () => {\r\n      this.props.deleteRound();\r\n      this.setState({confirmDelete: false});\r\n    }\r\n\r\n  //cancelDelete -- Triggered when the user chooses to cancel a delete\r\n  //operation. We just need to update state to toggle confirmDelete to false\r\n  cancelDelete = () => {\r\n    this.props.setDeleteId(\"\"); \r\n    this.setState({confirmDelete: false});\r\n  }",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			},
			{
				"pattern": {
					"type": "string",
					"expression": "this.setState({confirmDelete: true});",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			},
			{
				"pattern": {
					"type": "string",
					"expression": "this.props.setDeleteId(id);",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			},
			{
				"pattern": {
					"type": "string",
					"expression": "<button\r\n                type=\"submit\"\r\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\r\n                <span className={this.state.loginBtnIcon}/>\r\n                &nbsp;{this.state.loginBtnLabel}\r\n            </button>",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			},
			{
				"pattern": {
					"type": "string",
					"expression": " this.state = {loginBtnIcon: \"fa fa-sign-in\",\r\n        loginBtnLabel: \"Log In\"};",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			},
			{
				"pattern": {
					"type": "string",
					"expression": " this.state = {loginBtnIcon: \"fa fa-sign-in\",\r\n                    loginBtnLabel: \"Log In\"};",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			},
			{
				"pattern": {
					"type": "string",
					"expression": "//handleSubmit -- Called when user clicks on login button. Initiate spinner\r\n  //for 1 second and call handleLogin to do the work.\r\n  handleSubmit = (event) => {\r\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n                   loginBtnLabel: \"Logging In...\"});\r\n    //Initiate spinner for 1 second\r\n    setTimeout(this.handleLogin,1000);\r\n    event.preventDefault();\r\n  }",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			},
			{
				"pattern": {
					"type": "string",
					"expression": "<button\r\n            type=\"submit\"\r\n            className=\"btn-color-theme btn btn-primary btn-block login-btn\">\r\n            <span className={this.state.loginBtnIcon}/>\r\n            &nbsp;{this.state.loginBtnLabel}\r\n        </button>",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			},
			{
				"pattern": {
					"type": "string",
					"expression": "//handleLogin -- Callback function that sets up initial app state upon login.\r\nhandleLogin = () => {\r\n    //Set the userId of current user\r\n    let thisUser = this.emailInputRef.current.value;\r\n    this.props.setUserId(thisUser);\r\n    //Check whether we have saved data on this (or any) user:\r\n    let data = localStorage.getItem(\"speedgolfUserData\");\r\n    if (data == null) { \r\n      //No user app data stored yet -- create blank record for current user\r\n      localStorage.setItem(\"speedgolfUserData\",\r\n      JSON.stringify({[thisUser] : {\"rounds\" : {}, \"roundCount\": 0}}));  \r\n    } else {\r\n      //app data exists -- check if data exists for thisUser\r\n      data = JSON.parse(data);\r\n      if  (!data.hasOwnProperty(thisUser)) { \r\n          //No data for this user -- create empty data\r\n          data[thisUser] = {\"rounds\": {}, \"roundCount\": 0}; \r\n          localStorage.setItem(\"speedgolfUserData\",JSON.stringify(data));\r\n      } \r\n    }  \r\n    //Trigger switch to FEED mode\r\n    this.props.changeMode(AppMode.FEED);\r\n}",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			},
			{
				"pattern": {
					"type": "string",
					"expression": "this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n                   loginBtnLabel: \"Log In\"});",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			},
			{
				"pattern": {
					"type": "string",
					"expression": "handleLogin = () => {\r\n    this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n                   loginBtnLabel: \"Log In\"});\r\n    //Set the userId of current user\r\n    let thisUser = this.emailInputRef.current.value;\r\n    this.props.setUserId(thisUser);\r\n    //Check whether we have saved data on this (or any) user:\r\n    let data = localStorage.getItem(\"speedgolfUserData\");\r\n    if (data == null) { \r\n      //No user app data stored yet -- create blank record for current user\r\n      localStorage.setItem(\"speedgolfUserData\",\r\n      JSON.stringify({[thisUser] : {\"rounds\" : {}, \"roundCount\": 0}}));  \r\n    } else {\r\n      //app data exists -- check if data exists for thisUser\r\n      data = JSON.parse(data);\r\n      if  (!data.hasOwnProperty(thisUser)) { \r\n          //No data for this user -- create empty data\r\n          data[thisUser] = {\"rounds\": {}, \"roundCount\": 0}; \r\n          localStorage.setItem(\"speedgolfUserData\",JSON.stringify(data));\r\n      } \r\n    }  \r\n    //Trigger switch to FEED mode\r\n    this.props.changeMode(AppMode.FEED);\r\n}",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			},
			{
				"pattern": {
					"type": "string",
					"expression": "//handleSubmit -- Called when user clicks on login button. Initiate spinner\r\n//for 1 second and call handleLogin to do the work.\r\nhandleSubmit = (event) => {\r\nthis.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n                loginBtnLabel: \"Logging In...\"});\r\n//Initiate spinner for 1 second\r\nsetTimeout(this.handleLogin,1000);\r\nevent.preventDefault();\r\n}",
					"ignoreCase": false,
					"wholeMatch": false
				},
				"color": "yellow"
			}
		]
	}
}